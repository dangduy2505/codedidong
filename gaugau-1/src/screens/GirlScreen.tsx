import * as React from 'react'
import styled from 'styled-components'
import { Text, TouchableOpacity, View } from 'react-native'
import { Header, Input, Button } from 'react-native-elements'
import { sendPushNotification, getToken, Token } from '../services/api'

const Page = styled(View)`
  padding: 40px 30px 0 30px;
`

const Heading = styled(Text)`
  text-align: center;
  font-size: 20px;
  margin-bottom: 16px;
  font-weight: bold;
`

const ActionContainer = styled(View)`
  margin-top: 50px;
`

const ButtonContainer = styled(View)`
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: space-between;
`

const SummonButton = styled(TouchableOpacity)<{ color?: string }>`
  flex: 48% 0 0;
  background-color: ${props => props.color || 'red'};
  border-radius: 5px;
  text-align: center;
  margin-bottom: 10px;
  display: flex;
  height: 150px;
  align-items: center;
  justify-content: center;
  color: white;
`
const SummonButtonText = styled(Text)`
  color: white;
  font-size: 18px;
`

const GirlScreen: React.FC = () => {
  const [tokenInput, setTokenInput] = React.useState('')
  const [token, setToken] = React.useState<Token | undefined>()

  const getTokenFromId = async (tokenId: string) => {
    const storedToken = await getToken(tokenId)
    setToken(storedToken)
  }

  return (
    <>
      <Header centerComponent={{ text: 'Cho b·∫°n n·ªØ üëß', style: { color: '#fff' } }} />

      <Page>
        {token ? (
          <View>
            <Heading>M√£ s·ªë c·ªßa g·∫•u ƒë·ª±c l√† {token.id}.</Heading>
            <Heading>C√≥ th·ªÉ tri·ªáu h·ªìi g·∫•u üë¶!</Heading>
            <Button title="Nh·∫≠p m√£ s·ªë m·ªõi!" onPress={() => setToken(undefined)} type="outline" />
          </View>
        ) : (
          <View>
            <Input
              label="M√£ s·ªë g·∫•u üë¶"
              value={tokenInput}
              onChangeText={setTokenInput}
              placeholder="Nh·∫≠p m√£ s·ªë c·ªßa g·∫•u ƒë·ª±c v√†o ƒë√¢y!"
            />
            <Button title="X√°c nh·∫≠n m√£ s·ªë" onPress={() => getTokenFromId(tokenInput)} />
          </View>
        )}

        {token && (
          <ActionContainer>
            <Heading>Tri·ªáu h·ªìi g·∫•u üë¶</Heading>

            <ButtonContainer>
              <SummonButton
                color="#e74c3c"
                onPress={() =>
                  sendPushNotification(
                    token.token,
                    'üç± Em ƒë√≥i qu√°',
                    'Qua ch·ªü em ƒëi ƒÉn ƒëi em ƒë√≥i qu√° üòû.'
                  )
                }>
                <SummonButtonText>üç±Em ƒë√≥i qu√°</SummonButtonText>
              </SummonButton>
              <SummonButton
                color="#2980b9"
                onPress={() =>
                  sendPushNotification(
                    token.token,
                    'üßã Th√®m tr√† s·ªØa',
                    'Huhu em th√®m Ph√∫c Long Gong Cha üòû'
                  )
                }>
                <SummonButtonText>ü•§Th√®m tr√† s·ªØa</SummonButtonText>
              </SummonButton>
              <SummonButton
                color="#2ecc71"
                onPress={() =>
                  sendPushNotification(token.token, 'üò¢ Nh·ªõ anh qu√°', 'Nh·ªõ anh gh√™ ahuhu üòû!')
                }>
                <SummonButtonText>üò¢Nh·ªõ anh qu√°</SummonButtonText>
              </SummonButton>
              <SummonButton
                color="#f1c40f"
                onPress={() =>
                  sendPushNotification(
                    token.token,
                    'üì± G·ªçi e nha',
                    'Sao qua gi·ªù kh√¥ng g·ªçi, kh√¥ng nh·ªõ e √† üò§!'
                  )
                }>
                <SummonButtonText>üì±G·ªçi e nha</SummonButtonText>
              </SummonButton>
            </ButtonContainer>
          </ActionContainer>
        )}
      </Page>
    </>
  )
}

export default GirlScreen
